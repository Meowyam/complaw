Parse Success!

-----------------

Schema {schema_elementFormDefault = Qualified, schema_attributeFormDefault = Unqualified, schema_finalDefault = Nothing, schema_blockDefault = Nothing, schema_targetNamespace = Just "http://www.omg.org/spec/DMN/20180521/DI/", schema_version = Nothing, schema_namespaces = [Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"},Namespace {nsPrefix = "dc", nsURI = "http://www.omg.org/spec/DMN/20180521/DC/"},Namespace {nsPrefix = "di", nsURI = "http://www.omg.org/spec/DMN/20180521/DI/"}], schema_items = [Import "http://www.omg.org/spec/DMN/20180521/DC/" "DC.xsd" (NoAnnotation "missing"),Annotation (Documentation "The Diagram Interchange (DI) package enables interchange of graphical information that language users have control over, such as position of nodes and line routing points. Language specifications specialize elements of DI to define diagram interchange elements for a language."),SchemaElement (ElementDecl {elem_annotation = Documentation "This element should never be instantiated directly, but rather concrete implementation should. It is placed there only to be referred in the sequence", elem_nameOrRef = Left (NT {theName = "Style", theType = Just (N "Style")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),Complex (ComplexType {complex_annotation = Documentation "DiagramElement is the abstract super type of all elements in diagrams, including diagrams themselves. When contained in a diagram, diagram elements are laid out relative to the diagram's origin.", complex_name = Just "DiagramElement", complex_abstract = True, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ThisType {ci_thistype = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "extension", theType = Nothing}), elem_occurs = Occurs (Just 0) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ThisType {ci_thistype = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasAny (Any {any_annotation = NoAnnotation "missing", any_namespace = "##other", any_processContents = Lax, any_occurs = Occurs (Just 0) (Just 9223372036854775807)})]))) [] Nothing}})), elem_stuff = []}),HasElement (ElementDecl {elem_annotation = Documentation "an optional locally-owned style for this diagram element.", elem_nameOrRef = Right (N "Style"), elem_occurs = Occurs (Just 0) (Just 1), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [Left (AttributeDecl {attr_annotation = Documentation "a reference to an optional shared style element for this diagram element.", attr_nameOrRef = Left (NT {theName = "sharedStyle", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "IDREF")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "id", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "ID")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] (Just (AnyAttr {anyattr_annotation = NoAnnotation "missing", anyattr_namespace = "##other", anyattr_processContents = Lax}))}}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "Diagram", complex_abstract = True, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "DiagramElement", extension_newstuff = PA Nothing [Left (AttributeDecl {attr_annotation = Documentation "the name of the diagram.", attr_nameOrRef = Left (NT {theName = "name", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = Documentation "the documentation of the diagram.", attr_nameOrRef = Left (NT {theName = "documentation", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = Documentation "the resolution of the diagram expressed in user units per inch.", attr_nameOrRef = Left (NT {theName = "resolution", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "double")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] Nothing})}}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "Shape", complex_abstract = True, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "DiagramElement", extension_newstuff = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = Documentation "the optional bounds of the shape relative to the origin of its nesting plane.", elem_nameOrRef = Right (QN (Namespace {nsPrefix = "dc", nsURI = "http://www.omg.org/spec/DMN/20180521/DC/"}) "Bounds"), elem_occurs = Occurs (Just 0) (Just 1), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [] Nothing})}}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "Edge", complex_abstract = True, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "DiagramElement", extension_newstuff = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = Documentation "an optional list of points relative to the origin of the nesting diagram that specifies the connected line segments of the edge", elem_nameOrRef = Left (NT {theName = "waypoint", theType = Just (QN (Namespace {nsPrefix = "dc", nsURI = "http://www.omg.org/spec/DMN/20180521/DC/"}) "Point")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [] Nothing})}}),Complex (ComplexType {complex_annotation = Documentation "Style contains formatting properties that affect the appearance or style of diagram elements, including diagram themselves.", complex_name = Just "Style", complex_abstract = True, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ThisType {ci_thistype = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "extension", theType = Nothing}), elem_occurs = Occurs (Just 0) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ThisType {ci_thistype = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasAny (Any {any_annotation = NoAnnotation "missing", any_namespace = "##other", any_processContents = Lax, any_occurs = Occurs (Just 0) (Just 9223372036854775807)})]))) [] Nothing}})), elem_stuff = []})]))) [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "id", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "ID")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] (Just (AnyAttr {anyattr_annotation = NoAnnotation "missing", anyattr_namespace = "##other", anyattr_processContents = Lax}))}})]}

-----------------

