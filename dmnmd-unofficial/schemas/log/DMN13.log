Parse Success!

-----------------

Schema {schema_elementFormDefault = Qualified, schema_attributeFormDefault = Unqualified, schema_finalDefault = Nothing, schema_blockDefault = Nothing, schema_targetNamespace = Just "https://www.omg.org/spec/DMN/20191111/MODEL/", schema_version = Nothing, schema_namespaces = [Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"},Namespace {nsPrefix = "dmndi", nsURI = "https://www.omg.org/spec/DMN/20191111/DMNDI/"}], schema_items = [Import "https://www.omg.org/spec/DMN/20191111/DMNDI/" "DMNDI13.xsd" (Documentation "\r\n\t\t\t\tInclude the DMN Diagram Interchange (DI) schema\r\n\t\t\t"),SchemaElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "DMNElement", theType = Just (N "tDMNElement")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = True, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tDMNElement", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ThisType {ci_thistype = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "description", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string")}), elem_occurs = Occurs (Just 0) (Just 1), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "extensionElements", theType = Nothing}), elem_occurs = Occurs (Just 0) (Just 1), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ThisType {ci_thistype = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasAny (Any {any_annotation = NoAnnotation "missing", any_namespace = "##other", any_processContents = Lax, any_occurs = Occurs (Just 0) (Just 9223372036854775807)})]))) [] Nothing}})), elem_stuff = []})]))) [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "id", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "ID")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "label", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] (Just (AnyAttr {anyattr_annotation = NoAnnotation "missing", anyattr_namespace = "##other", anyattr_processContents = Lax}))}}),SchemaElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "namedElement", theType = Just (N "tNamedElement")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Just (N "DMNElement"), elem_abstract = True, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tNamedElement", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tDMNElement", extension_newstuff = PA Nothing [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "name", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string")}), attr_use = Required, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] Nothing})}}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tDMNElementReference", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ThisType {ci_thistype = PA Nothing [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "href", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "anyURI")}), attr_use = Required, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] Nothing}}),SchemaElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "definitions", theType = Just (N "tDefinitions")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Just (N "namedElement"), elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tDefinitions", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tNamedElement", extension_newstuff = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Right (N "import"), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "itemDefinition", theType = Just (N "tItemDefinition")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Right (N "drgElement"), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Right (N "artifact"), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "elementCollection", theType = Just (N "tElementCollection")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Right (N "businessContextElement"), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Right (QN (Namespace {nsPrefix = "dmndi", nsURI = "https://www.omg.org/spec/DMN/20191111/DMNDI/"}) "DMNDI"), elem_occurs = Occurs (Just 0) (Just 1), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "expressionLanguage", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "anyURI")}), attr_use = Optional, attr_defFixed = Just (Left "https://www.omg.org/spec/DMN/20191111/FEEL/"), attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "typeLanguage", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "anyURI")}), attr_use = Optional, attr_defFixed = Just (Left "https://www.omg.org/spec/DMN/20191111/FEEL/"), attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "namespace", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "anyURI")}), attr_use = Required, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "exporter", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "exporterVersion", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] Nothing})}}),SchemaElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "import", theType = Just (N "tImport")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Just (N "namedElement"), elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tImport", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tNamedElement", extension_newstuff = PA Nothing [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "namespace", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "anyURI")}), attr_use = Required, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "locationURI", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "anyURI")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "importType", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "anyURI")}), attr_use = Required, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] Nothing})}}),SchemaElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "elementCollection", theType = Just (N "tElementCollection")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Just (N "namedElement"), elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tElementCollection", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tNamedElement", extension_newstuff = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "drgElement", theType = Just (N "tDMNElementReference")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [] Nothing})}}),SchemaElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "drgElement", theType = Just (N "tDRGElement")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Just (N "namedElement"), elem_abstract = True, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tDRGElement", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tNamedElement", extension_newstuff = PA Nothing [] Nothing})}}),SchemaElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "decision", theType = Just (N "tDecision")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Just (N "drgElement"), elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tDecision", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tDRGElement", extension_newstuff = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "question", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string")}), elem_occurs = Occurs (Just 0) (Just 1), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "allowedAnswers", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string")}), elem_occurs = Occurs (Just 0) (Just 1), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "variable", theType = Just (N "tInformationItem")}), elem_occurs = Occurs (Just 0) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "informationRequirement", theType = Just (N "tInformationRequirement")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "knowledgeRequirement", theType = Just (N "tKnowledgeRequirement")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "authorityRequirement", theType = Just (N "tAuthorityRequirement")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "supportedObjective", theType = Just (N "tDMNElementReference")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "impactedPerformanceIndicator", theType = Just (N "tDMNElementReference")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "decisionMaker", theType = Just (N "tDMNElementReference")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "decisionOwner", theType = Just (N "tDMNElementReference")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "usingProcess", theType = Just (N "tDMNElementReference")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "usingTask", theType = Just (N "tDMNElementReference")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Right (N "expression"), elem_occurs = Occurs (Just 0) (Just 1), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [] Nothing})}}),SchemaElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "businessContextElement", theType = Just (N "tBusinessContextElement")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = True, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tBusinessContextElement", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tNamedElement", extension_newstuff = PA Nothing [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "URI", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "anyURI")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] Nothing})}}),SchemaElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "performanceIndicator", theType = Just (N "tPerformanceIndicator")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Just (N "businessContextElement"), elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tPerformanceIndicator", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tBusinessContextElement", extension_newstuff = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "impactingDecision", theType = Just (N "tDMNElementReference")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [] Nothing})}}),SchemaElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "organizationUnit", theType = Just (N "tOrganizationUnit")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Just (N "businessContextElement"), elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tOrganizationUnit", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tBusinessContextElement", extension_newstuff = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "decisionMade", theType = Just (N "tDMNElementReference")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "decisionOwned", theType = Just (N "tDMNElementReference")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [] Nothing})}}),SchemaElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "invocable", theType = Just (N "tInvocable")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Just (N "drgElement"), elem_abstract = True, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tInvocable", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tDRGElement", extension_newstuff = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "variable", theType = Just (N "tInformationItem")}), elem_occurs = Occurs (Just 0) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [] Nothing})}}),SchemaElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "businessKnowledgeModel", theType = Just (N "tBusinessKnowledgeModel")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Just (N "invocable"), elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tBusinessKnowledgeModel", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tInvocable", extension_newstuff = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "encapsulatedLogic", theType = Just (N "tFunctionDefinition")}), elem_occurs = Occurs (Just 0) (Just 1), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "knowledgeRequirement", theType = Just (N "tKnowledgeRequirement")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "authorityRequirement", theType = Just (N "tAuthorityRequirement")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [] Nothing})}}),SchemaElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "inputData", theType = Just (N "tInputData")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Just (N "drgElement"), elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tInputData", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tDRGElement", extension_newstuff = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "variable", theType = Just (N "tInformationItem")}), elem_occurs = Occurs (Just 0) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [] Nothing})}}),SchemaElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "knowledgeSource", theType = Just (N "tKnowledgeSource")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Just (N "drgElement"), elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tKnowledgeSource", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tDRGElement", extension_newstuff = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "authorityRequirement", theType = Just (N "tAuthorityRequirement")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "type", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string")}), elem_occurs = Occurs (Just 0) (Just 1), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "owner", theType = Just (N "tDMNElementReference")}), elem_occurs = Occurs (Just 0) (Just 1), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "locationURI", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "anyURI")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] Nothing})}}),SchemaElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "informationRequirement", theType = Just (N "tInformationRequirement")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Just (N "DMNElement"), elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tInformationRequirement", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tDMNElement", extension_newstuff = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasCS (Choice (NoAnnotation "missing") (Occurs (Just 1) (Just 1)) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "requiredDecision", theType = Just (N "tDMNElementReference")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "requiredInput", theType = Just (N "tDMNElementReference")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})])]))) [] Nothing})}}),SchemaElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "knowledgeRequirement", theType = Just (N "tKnowledgeRequirement")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Just (N "DMNElement"), elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tKnowledgeRequirement", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tDMNElement", extension_newstuff = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "requiredKnowledge", theType = Just (N "tDMNElementReference")}), elem_occurs = Occurs (Just 1) (Just 1), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [] Nothing})}}),SchemaElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "authorityRequirement", theType = Just (N "tAuthorityRequirement")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Just (N "DMNElement"), elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tAuthorityRequirement", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tDMNElement", extension_newstuff = PA (Just (Left (Choice (NoAnnotation "missing") (Occurs (Just 1) (Just 1)) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "requiredDecision", theType = Just (N "tDMNElementReference")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "requiredInput", theType = Just (N "tDMNElementReference")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "requiredAuthority", theType = Just (N "tDMNElementReference")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [] Nothing})}}),SchemaElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "expression", theType = Just (N "tExpression")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = True, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tExpression", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tDMNElement", extension_newstuff = PA Nothing [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "typeRef", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] Nothing})}}),SchemaElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "itemDefinition", theType = Just (N "tItemDefinition")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Just (N "namedElement"), elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tItemDefinition", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tNamedElement", extension_newstuff = PA (Just (Left (Choice (NoAnnotation "missing") (Occurs Nothing Nothing) [HasCS (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "typeRef", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "allowedValues", theType = Just (N "tUnaryTests")}), elem_occurs = Occurs (Just 0) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "itemComponent", theType = Just (N "tItemDefinition")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "functionItem", theType = Just (N "tFunctionItem")}), elem_occurs = Occurs (Just 0) (Just 1), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "typeLanguage", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "anyURI")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "isCollection", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "boolean")}), attr_use = Optional, attr_defFixed = Just (Left "false"), attr_form = Unqualified, attr_simpleType = Nothing})] Nothing})}}),SchemaElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "functionItem", theType = Just (N "tFunctionItem")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Just (N "DMNElement"), elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tFunctionItem", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tDMNElement", extension_newstuff = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "parameters", theType = Just (N "tInformationItem")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "outputTypeRef", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] Nothing})}}),SchemaElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "literalExpression", theType = Just (N "tLiteralExpression")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Just (N "expression"), elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tLiteralExpression", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tExpression", extension_newstuff = PA (Just (Left (Choice (NoAnnotation "missing") (Occurs (Just 0) (Just 1)) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "text", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "importedValues", theType = Just (N "tImportedValues")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "expressionLanguage", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "anyURI")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] Nothing})}}),SchemaElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "invocation", theType = Just (N "tInvocation")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Just (N "expression"), elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tInvocation", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tExpression", extension_newstuff = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Right (N "expression"), elem_occurs = Occurs (Just 0) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "binding", theType = Just (N "tBinding")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [] Nothing})}}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tBinding", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ThisType {ci_thistype = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "parameter", theType = Just (N "tInformationItem")}), elem_occurs = Occurs (Just 1) (Just 1), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Right (N "expression"), elem_occurs = Occurs (Just 0) (Just 1), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [] Nothing}}),SchemaElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "informationItem", theType = Just (N "tInformationItem")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Just (N "namedElement"), elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tInformationItem", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tNamedElement", extension_newstuff = PA Nothing [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "typeRef", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] Nothing})}}),SchemaElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "decisionTable", theType = Just (N "tDecisionTable")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Just (N "expression"), elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tDecisionTable", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tExpression", extension_newstuff = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "input", theType = Just (N "tInputClause")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "output", theType = Just (N "tOutputClause")}), elem_occurs = Occurs Nothing (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "annotation", theType = Just (N "tRuleAnnotationClause")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "rule", theType = Just (N "tDecisionRule")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "hitPolicy", theType = Just (N "tHitPolicy")}), attr_use = Optional, attr_defFixed = Just (Left "UNIQUE"), attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "aggregation", theType = Just (N "tBuiltinAggregator")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "preferredOrientation", theType = Just (N "tDecisionTableOrientation")}), attr_use = Optional, attr_defFixed = Just (Left "Rule-as-Row"), attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "outputLabel", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] Nothing})}}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tInputClause", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tDMNElement", extension_newstuff = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "inputExpression", theType = Just (N "tLiteralExpression")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "inputValues", theType = Just (N "tUnaryTests")}), elem_occurs = Occurs (Just 0) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [] Nothing})}}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tOutputClause", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tDMNElement", extension_newstuff = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "outputValues", theType = Just (N "tUnaryTests")}), elem_occurs = Occurs (Just 0) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "defaultOutputEntry", theType = Just (N "tLiteralExpression")}), elem_occurs = Occurs (Just 0) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "name", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "typeRef", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] Nothing})}}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tRuleAnnotationClause", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ThisType {ci_thistype = PA Nothing [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "name", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] Nothing}}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tDecisionRule", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tDMNElement", extension_newstuff = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "inputEntry", theType = Just (N "tUnaryTests")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "outputEntry", theType = Just (N "tLiteralExpression")}), elem_occurs = Occurs Nothing (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "annotationEntry", theType = Just (N "tRuleAnnotation")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [] Nothing})}}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tRuleAnnotation", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ThisType {ci_thistype = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "text", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string")}), elem_occurs = Occurs (Just 0) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [] Nothing}}),Simple (Restricted {simple_annotation = NoAnnotation "missing", simple_name = Just "tHitPolicy", simple_final = Nothing, simple_restriction = RestrictType {restrict_annotation = NoAnnotation "missing", restrict_base = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string"), restrict_type = Nothing, restrict_facets = [Facet {facet_facetType = UnorderedEnumeration, facet_annotation = NoAnnotation "missing", facet_facetValue = "UNIQUE", facet_fixed = False},Facet {facet_facetType = UnorderedEnumeration, facet_annotation = NoAnnotation "missing", facet_facetValue = "FIRST", facet_fixed = False},Facet {facet_facetType = UnorderedEnumeration, facet_annotation = NoAnnotation "missing", facet_facetValue = "PRIORITY", facet_fixed = False},Facet {facet_facetType = UnorderedEnumeration, facet_annotation = NoAnnotation "missing", facet_facetValue = "ANY", facet_fixed = False},Facet {facet_facetType = UnorderedEnumeration, facet_annotation = NoAnnotation "missing", facet_facetValue = "COLLECT", facet_fixed = False},Facet {facet_facetType = UnorderedEnumeration, facet_annotation = NoAnnotation "missing", facet_facetValue = "RULE ORDER", facet_fixed = False},Facet {facet_facetType = UnorderedEnumeration, facet_annotation = NoAnnotation "missing", facet_facetValue = "OUTPUT ORDER", facet_fixed = False}]}}),Simple (Restricted {simple_annotation = NoAnnotation "missing", simple_name = Just "tBuiltinAggregator", simple_final = Nothing, simple_restriction = RestrictType {restrict_annotation = NoAnnotation "missing", restrict_base = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string"), restrict_type = Nothing, restrict_facets = [Facet {facet_facetType = UnorderedEnumeration, facet_annotation = NoAnnotation "missing", facet_facetValue = "SUM", facet_fixed = False},Facet {facet_facetType = UnorderedEnumeration, facet_annotation = NoAnnotation "missing", facet_facetValue = "COUNT", facet_fixed = False},Facet {facet_facetType = UnorderedEnumeration, facet_annotation = NoAnnotation "missing", facet_facetValue = "MIN", facet_fixed = False},Facet {facet_facetType = UnorderedEnumeration, facet_annotation = NoAnnotation "missing", facet_facetValue = "MAX", facet_fixed = False}]}}),Simple (Restricted {simple_annotation = NoAnnotation "missing", simple_name = Just "tDecisionTableOrientation", simple_final = Nothing, simple_restriction = RestrictType {restrict_annotation = NoAnnotation "missing", restrict_base = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string"), restrict_type = Nothing, restrict_facets = [Facet {facet_facetType = UnorderedEnumeration, facet_annotation = NoAnnotation "missing", facet_facetValue = "Rule-as-Row", facet_fixed = False},Facet {facet_facetType = UnorderedEnumeration, facet_annotation = NoAnnotation "missing", facet_facetValue = "Rule-as-Column", facet_fixed = False},Facet {facet_facetType = UnorderedEnumeration, facet_annotation = NoAnnotation "missing", facet_facetValue = "CrossTable", facet_fixed = False}]}}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tImportedValues", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tImport", extension_newstuff = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "importedElement", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "expressionLanguage", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "anyURI")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] Nothing})}}),SchemaElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "artifact", theType = Just (N "tArtifact")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Just (N "DMNElement"), elem_abstract = True, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tArtifact", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tDMNElement", extension_newstuff = PA Nothing [] Nothing})}}),SchemaElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "group", theType = Just (N "tGroup")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Just (N "artifact"), elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tGroup", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tArtifact", extension_newstuff = PA Nothing [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "name", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] Nothing})}}),SchemaElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "textAnnotation", theType = Just (N "tTextAnnotation")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Just (N "artifact"), elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tTextAnnotation", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tArtifact", extension_newstuff = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "text", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string")}), elem_occurs = Occurs (Just 0) (Just 1), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "textFormat", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string")}), attr_use = Optional, attr_defFixed = Just (Left "text/plain"), attr_form = Unqualified, attr_simpleType = Nothing})] Nothing})}}),SchemaElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "association", theType = Just (N "tAssociation")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Just (N "artifact"), elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tAssociation", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tArtifact", extension_newstuff = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "sourceRef", theType = Just (N "tDMNElementReference")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "targetRef", theType = Just (N "tDMNElementReference")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "associationDirection", theType = Just (N "tAssociationDirection")}), attr_use = Optional, attr_defFixed = Just (Left "None"), attr_form = Unqualified, attr_simpleType = Nothing})] Nothing})}}),Simple (Restricted {simple_annotation = NoAnnotation "missing", simple_name = Just "tAssociationDirection", simple_final = Nothing, simple_restriction = RestrictType {restrict_annotation = NoAnnotation "missing", restrict_base = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string"), restrict_type = Nothing, restrict_facets = [Facet {facet_facetType = UnorderedEnumeration, facet_annotation = NoAnnotation "missing", facet_facetValue = "None", facet_fixed = False},Facet {facet_facetType = UnorderedEnumeration, facet_annotation = NoAnnotation "missing", facet_facetValue = "One", facet_fixed = False},Facet {facet_facetType = UnorderedEnumeration, facet_annotation = NoAnnotation "missing", facet_facetValue = "Both", facet_fixed = False}]}}),SchemaElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "context", theType = Just (N "tContext")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Just (N "expression"), elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tContext", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tExpression", extension_newstuff = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Right (N "contextEntry"), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [] Nothing})}}),SchemaElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "contextEntry", theType = Just (N "tContextEntry")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Just (N "DMNElement"), elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tContextEntry", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tDMNElement", extension_newstuff = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "variable", theType = Just (N "tInformationItem")}), elem_occurs = Occurs (Just 0) (Just 1), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Right (N "expression"), elem_occurs = Occurs (Just 1) (Just 1), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [] Nothing})}}),SchemaElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "functionDefinition", theType = Just (N "tFunctionDefinition")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Just (N "expression"), elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tFunctionDefinition", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tExpression", extension_newstuff = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "formalParameter", theType = Just (N "tInformationItem")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Right (N "expression"), elem_occurs = Occurs (Just 0) (Just 1), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "kind", theType = Just (N "tFunctionKind")}), attr_use = Optional, attr_defFixed = Just (Left "FEEL"), attr_form = Unqualified, attr_simpleType = Nothing})] Nothing})}}),Simple (Restricted {simple_annotation = NoAnnotation "missing", simple_name = Just "tFunctionKind", simple_final = Nothing, simple_restriction = RestrictType {restrict_annotation = NoAnnotation "missing", restrict_base = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string"), restrict_type = Nothing, restrict_facets = [Facet {facet_facetType = UnorderedEnumeration, facet_annotation = NoAnnotation "missing", facet_facetValue = "FEEL", facet_fixed = False},Facet {facet_facetType = UnorderedEnumeration, facet_annotation = NoAnnotation "missing", facet_facetValue = "Java", facet_fixed = False},Facet {facet_facetType = UnorderedEnumeration, facet_annotation = NoAnnotation "missing", facet_facetValue = "PMML", facet_fixed = False}]}}),SchemaElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "relation", theType = Just (N "tRelation")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Just (N "expression"), elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tRelation", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tExpression", extension_newstuff = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "column", theType = Just (N "tInformationItem")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "row", theType = Just (N "tList")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [] Nothing})}}),SchemaElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "list", theType = Just (N "tList")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Just (N "expression"), elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tList", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tExpression", extension_newstuff = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Right (N "expression"), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [] Nothing})}}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tUnaryTests", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tExpression", extension_newstuff = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "text", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "expressionLanguage", theType = Just (QN (Namespace {nsPrefix = "xsd", nsURI = "http://www.w3.org/2001/XMLSchema"}) "anyURI")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] Nothing})}}),SchemaElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "decisionService", theType = Just (N "tDecisionService")}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Just (N "invocable"), elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "tDecisionService", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ComplexContent {ci_annotation = NoAnnotation "missing", ci_mixed = False, ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "tInvocable", extension_newstuff = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "outputDecision", theType = Just (N "tDMNElementReference")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "encapsulatedDecision", theType = Just (N "tDMNElementReference")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "inputDecision", theType = Just (N "tDMNElementReference")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "inputData", theType = Just (N "tDMNElementReference")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [] Nothing})}})]}

-----------------

