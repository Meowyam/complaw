#+TITLE: A Short Introduction To Parsing

#+begin_quote
Any pidgin algebra can be dressed up as pidgin English to please the generals. [[https://www.cs.cmu.edu/~crary/819-f09/Landin66.pdf][Landin 1966, The Next 700 Programming Languages]]
#+end_quote

In this exercise we learn parsing from first principles.

The learning method is by induction, which means we toss you in the water at successively greater depths; before you know it, you'll have learned to swim!

* The Dungeon Game

Let's play a game. Your inner 10-year-old is locked in a cell. Don't worry, it's very comfortable. We only call it the Dungeon Game to distinguish it from Searle's Chinese Room, which is a different game. There is a window in the wall through which you can pass food and water. Through the window you will feed a strip of paper, on which a series of large letters is printed. (Actually, numbers.)

The game is this. You say: "this strip of paper contains a math problem. I want the answer. Like, if the paper says "2+2", the answer is four. When we reach the end of the strip, if you give the correct answer, you get to play Minecraft for ten minutes, or whatever."

Problem is, the game only lets you push the strip of paper into the room one character at a time.

So, for each round in the game, you feed them one more character from the strip, and your 10-year-old has to answer these questions:
- What does this new character tell you?
- What are you expecting next?
- If the paper stops here, what answer would you give?

Training level, round 1. The paper starts with "2". Your 10-year-old says: "You gave me a 2. If there's nothing else, I'll say the answer is 2. But there could be more -- like, since this is the training level, I'm going to guess you're going for 2+2, which would be 4 like you said."

Smart kid. Round 2. The next character is, indeed, a "+". Your 10-year-old says: "You gave me a plus. So the answer is going to be two plus whatever comes next -- so if you give me another number, I'll add 2 to it, and that'll be the answer. But if we stop here I'll cry foul because there is no answer to "2+" -- your question isn't complete!"

Round 3. The kid tugs one more character through the window. It reads: "4". Your 10-year-old says, "ha ha, so it's not 2+2, it's 2+4. If the paper ends here, then the answer is 6. But it looks like there's more to come."

Round 4. One more character enters the room. It reads: "0". Your 10-year-old says, "OK, I get it. So I've got a 40, not a 4. That makes the question so far 2 plus 40; if the paper stops here, the answer is 42."

You say, "yup, end of input: the correct answer is ... 42!" Somewhere, Douglas Adams is smiling down on you and your inner 10-year-old.

In this exercise, feed your 10-year-old the input string, and listen for the answers in each round: what do you make of the character you just got, what might come next, and if we stop here, what is the answer "so far"? Be as literal-minded as you can: if you get a space character, don't just skip over it mentally. You should say something like: "I got a space, and the previous input was a number, so I know the number just ended, and there won't be any more digits to follow; I'm expecting the next thing to come along will be an operator like plus or minus."

| input string                |
|-----------------------------|
| 4                           |
| 2+2                         |
| 2 + \nbsp{}\nbsp{}\nbsp{} 2 |
| 2 + 4 * 6                   |
| 2 + 4 * 6 - 8               |
| 2 + 4 * 6 * 8               |
| 2 + 4 * 6 - 80              |
| 2 + 4 * 6 - 80 / 10         |
| 10 ** 2                     |
| 2*(4+6)                     |
| (11+11) / 2 + 2 * 2         |

If your inner 10-year-old gets all the answers right, then nothing to fear at the next math test!

* Doing it in code

Going character by character is basically what parsers do, and if it sounds tedious, well, the job of a parser /library/ is to relieve as much of that tedium as possible. For now, though, we need to accept the tedium, because the library lies in our future; if we jump straight to using a library we won't understand what it is doing under the hood, and it's important that you know what happens under the hood. We're building an edifice of understanding from the ground up, brick by brick. What your ten-year-old does, a computer does. The steps of the algorithm are the same; the only difference is that the computer can run one to two billion of these steps every second. No wonder we outsource the tedium to them.

Next exercise. Still no parser library allowed. Instead, you'll be building a primitive parser from scratch, and along the way you'll probably reinvent many of the principles that inform real-world parser libraries.

In your favourite language, *for each row in this table*, write a program or a function that, given the input string, takes it apart and computes it in a way that would satisfy your math teacher in school. But using ~eval()~ is cheating!

Start simple. Your first program only has to handle the input "4". Seriously. Don't get ahead of yourself! It's tempting to jump ahead, but you'll regret it later. Don't worry. This exercise moves fast. You can evolve your program to handle new cases, as long as it also handles all the old cases.

| input string                | learning objective                               |
|-----------------------------+--------------------------------------------------|
| 4                           | convert a string to an integer and print it      |
| 6                           | handle different numbers                         |
| 0                           | handle different numbers                         |
| 9                           | handle different numbers                         |
| @                           | show an error message                            |
| 2+2                         | "+" is a binary operator                         |
| 2 + 2                       | discard whitespace                               |
| 2 + \nbsp{}\nbsp{}\nbsp{} 2 | discard arbitrary whitespace                     |
| 2 + 4 + 6                   | handle different numbers and multiple operators  |
| 2 + 4 + 6 - 8               | handle different numbers and multiple operators  |
| 2 + 4 + 6 - 80              | handle a mix of operators                        |
| 2 + 4 + 6 - 80 / 10         | operator precedence!                             |
| 2 + 10                      | numbers can have multiple digits! "tokenization" |
| 10 + 22                     | multiple digits on both sides                    |
| 10 * 10                     | introduce the multiplication operator            |
| 10 ** 2                     | tokenization is for operators too                |
| 22 / 10                     | introduce division                               |
| 22 *                        | what happens when you run out of input?          |
| 22 / (10)                   | introduce parentheses                            |
| 22 / (5+5)                  | introduce parentheses for real                   |
| -22                         | introduce negative numbers                       |
| -22 / (5+5)                 | introduce negative numbers in action             |
| (50+50) / -22               | introduce negative numbers in inconvenient spots |
| -22 / (-5+12)               | introduce negative numbers in other spots        |
| (0-22) / (2+2)              | do your parens really work?                      |
| (11+11) / 2 + 2 * 2         | operator precedence!                             |
| (0-(11                      | give the most detailed error message possible.   |
| 11 + +10                    | give the most detailed error message possible.   |
| 11 + -10                    | this is not an error.                            |
| 2+4*6                       | operator precedence                              |
| 2*4+6                       | operator precedence                              |
| 2*(4+6)                     | do your parens still work?                       |

Unlike the Dungeon Game, you're given the whole string at once, so you can deal with it however you like.

* Example Answers

In Python, the simplest possible parser, which works for the first five rows, checks if the input is a single digit:
#+begin_src python :tangle parsers.py
  #!/usr/bin/python3
  def prsr1 (str):
      if len(str) == 1:
         if ord('0') <= ord(str) <= ord('9'):
             return(int(str))
         else:
             print("i can only handle a simple integer right now")
             raise ValueError
      else:
          print("i can only handle a single character right now")
          raise ValueError
  print("2 should be 2:", prsr1("2") == 2)
#+end_src

Same idea in Javascript, but with a tokenization step.

#+begin_src typescript :tangle parsers.ts
  export function prsr1 (str) {
    const tokens = str.split(/\b/);
    console.log(tokens);
    if (tokens.length == 1
      && "0".charCodeAt(0) <= tokens[0].charCodeAt(0)
      && "9".charCodeAt(0) >= tokens[0].charCodeAt(0)
       ) { return parseInt(tokens[0]) }
    else {
      console.error("expecting a single numeric digit")
    }
  }
#+end_src

Work down the table row by row, evolving your program to be able to handle both the current row and all earlier rows.

#+begin_src typescript :tangle parsers.ts
  export function prsr2 (str) {
    const tokens = str.split(/\b/);
    console.log(tokens);
    if (tokens.length == 1) { return parseInt(tokens[0]) }
    if ((tokens[0]+tokens[2]).match(/^[0-9]+$/)) {
      if (tokens[1] == "*") { return tokens[0] * tokens[2]; }
      if (tokens[1] == "+") { return parseInt(tokens[0]) + parseInt(tokens[2]) }
    }
  }
  console.log(prsr2("2") + ` should be 2`)
  console.log(prsr2("2+2") + ` should be 4`)
  console.log(prsr2("2*4") + ` should be 8`)
#+end_src

#+begin_src python :tangle parsers.py
  import re
  def prsr2 (str):
      tokens = re.split(r'\b',str)
      if len(tokens) == 3:
          return(tokens[1])
      if len(tokens) == 5:
          if (tokens[2] == "*"): return int(tokens[1]) * int(tokens[3])
          if (tokens[2] == "+"): return int(tokens[1]) + int(tokens[3])
  print(prsr2("2+2"), "should be 4")
#+end_src

Along the way you will throw up your hands and say "the approach I've been using so far won't work for the next problem!" That is fine. It is called "progress".

Remember, your inner 10-year-old already knows everything you need to do this!


** Error messages

When you run out of input or deal with an ill-formed input string, give the most appropriate error message you can. What does your favourite programming language do when asked to deal with the same input?

** Example Runs

From emacs org-mode, editing this README.org, C-c C-v C-t to tangle output.

*** Python

#+begin_example
$ python3
Python 3.8.5 (default, Jul 21 2020, 10:48:26)
[Clang 11.0.3 (clang-1103.0.32.62)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> import parsers
2 should be 2: True
4 should be 4
>>> parsers.prsr1("6")
6
>>> parsers.prsr1("t")
i can only handle a simple integer right now
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/Users/mengwong/src/smucclaw/complaw/doc/ex-mathlang-20200821/parsers.py", line 9, in prsr1
    raise ValueError
ValueError
>>> parsers.prsr1("two")
i can only handle a single character right now
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/Users/mengwong/src/smucclaw/complaw/doc/ex-mathlang-20200821/parsers.py", line 12, in prsr1
    raise ValueError
ValueError
#+end_example

*** Javascript / Typescript

You may need to ~npm i -g typescript~. We use ~tsc~ to compile Typescript to runnable Javascript.

#+begin_example
$ tsc parsers.ts
$ node
Welcome to Node.js v14.4.0.
Type ".help" for more information.
> p=require('./parsers.js')
[ '2' ]
2 should be 2
[ '2', '+', '2' ]
4 should be 4
[ '2', '*', '4' ]
8 should be 8
{
  __esModule: true,
  prsr1: [Function: prsr1],
  prsr2: [Function: prsr2]
}
> p.prsr1("two")
[ 'two' ]
expecting a single numeric digit
undefined
> p.prsr1("0")
[ '0' ]
0

#+end_example

** Learning Objectives
Technical terms for the tricks you performed along the way:
- tokenization
- lexing
- construction of an abstract syntax tree
- recursive evaluation
- definition of operator precedence
- prefix vs infix notation
- binary vs unary operators

Read: http://otfried.org/courses/cs206/notes/calculator.pdf

* Part 2: Use GF to turn arbitrary math expressions into English

Take a look at https://cdecl.org/

That's a bidirectional English-to-C converter.

Now imagine a bidirectional English-to-Math converter. You've played this game before, as a 12 year old: they're called word problems in math class.

Write a GF grammar that, given the abstract syntax tree you parsed, produces a coherent English equivalent. As in, "The sum of two and two is four." "Twenty-two divided by the sum of five and five is 2.2".

* Now that you've done it by hand

Imagine other languages and their grammars; wouldn't it be nice to abstract out to a separate layer the idea of a lexer? Given a language definition of some sort, it should be possible to automate the code-generation of a lexer and compiler. That's why "yacc" is called "yet another compiler compiler". And that's exactly what Eric Schmidt did before his days as a Google billionaire CEO -- he wrote "lex" as an intern at Bell Labs in 1975.

If you come from Javascript, look at [[https://pegjs.org/online][PEG.js]] or [[https://zaa.ch/jison/][Jison]].

In other languages, see: http://www.rosettacode.org/wiki/Arithmetic_evaluation

Finally, learn [[http://bnfc.digitalgrammars.com/][BNFC]].
